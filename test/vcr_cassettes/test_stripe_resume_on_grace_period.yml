---
http_interactions:
- request:
    method: post
    uri: https://api.stripe.com/v1/customers
    body:
      encoding: UTF-8
      string: email=stripe%40example.org&name=Stripe+User&expand[0]=tax
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/6.5.0 PayRails/4.0.3 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer <STRIPE_PRIVATE_KEY>
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_9HBxUfJmYndw5U","request_duration_ms":561}}'
      Idempotency-Key:
      - af6da923-85d0-4aac-8b1b-31496ed44ea7
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"4.0.3"},"bindings_version":"6.5.0","lang":"ruby","lang_version":"3.1.2
        p20 (2022-04-12)","platform":"x86_64-darwin21","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.localdomain 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22
        PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.localdomain"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 28 Jul 2022 03:32:22 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '774'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Idempotency-Key:
      - af6da923-85d0-4aac-8b1b-31496ed44ea7
      Original-Request:
      - req_hhJQTRqTQ4vzky
      Request-Id:
      - req_hhJQTRqTQ4vzky
      Stripe-Should-Retry:
      - 'false'
      Stripe-Version:
      - '2020-08-27'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: UTF-8
      string: |-
        {
          "id": "cus_M8emIMB2jMljfy",
          "object": "customer",
          "address": null,
          "balance": 0,
          "created": 1658979142,
          "currency": null,
          "default_currency": null,
          "default_source": null,
          "delinquent": false,
          "description": null,
          "discount": null,
          "email": "stripe@example.org",
          "invoice_prefix": "80E29DFA",
          "invoice_settings": {
            "custom_fields": null,
            "default_payment_method": null,
            "footer": null,
            "rendering_options": null
          },
          "livemode": false,
          "metadata": {},
          "name": "Stripe User",
          "next_invoice_sequence": 1,
          "phone": null,
          "preferred_locales": [],
          "shipping": null,
          "tax": {
            "automatic_tax": "unrecognized_location",
            "ip_address": null,
            "location": null
          },
          "tax_exempt": "none",
          "test_clock": null
        }
  recorded_at: Thu, 28 Jul 2022 03:32:22 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/payment_methods/pm_card_visa/attach
    body:
      encoding: UTF-8
      string: customer=cus_M8emIMB2jMljfy
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/6.5.0 PayRails/4.0.3 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer <STRIPE_PRIVATE_KEY>
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_hhJQTRqTQ4vzky","request_duration_ms":445}}'
      Idempotency-Key:
      - 1397ccea-110e-4e15-b7d2-08b6456d3965
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"4.0.3"},"bindings_version":"6.5.0","lang":"ruby","lang_version":"3.1.2
        p20 (2022-04-12)","platform":"x86_64-darwin21","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.localdomain 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22
        PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.localdomain"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 28 Jul 2022 03:32:23 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '939'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Idempotency-Key:
      - 1397ccea-110e-4e15-b7d2-08b6456d3965
      Original-Request:
      - req_8e6fDn0B2DRWXJ
      Request-Id:
      - req_8e6fDn0B2DRWXJ
      Stripe-Should-Retry:
      - 'false'
      Stripe-Version:
      - '2020-08-27'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: UTF-8
      string: |-
        {
          "id": "pm_1LQNSUKXBGcbgpbZDRmXQTgd",
          "object": "payment_method",
          "billing_details": {
            "address": {
              "city": null,
              "country": null,
              "line1": null,
              "line2": null,
              "postal_code": null,
              "state": null
            },
            "email": null,
            "name": null,
            "phone": null
          },
          "card": {
            "brand": "visa",
            "checks": {
              "address_line1_check": null,
              "address_postal_code_check": null,
              "cvc_check": null
            },
            "country": "US",
            "exp_month": 7,
            "exp_year": 2023,
            "fingerprint": "w4XDzQOFakih5EZM",
            "funding": "credit",
            "generated_from": null,
            "last4": "4242",
            "networks": {
              "available": [
                "visa"
              ],
              "preferred": null
            },
            "three_d_secure_usage": {
              "supported": true
            },
            "wallet": null
          },
          "created": 1658979142,
          "customer": "cus_M8emIMB2jMljfy",
          "livemode": false,
          "metadata": {},
          "type": "card"
        }
  recorded_at: Thu, 28 Jul 2022 03:32:22 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/customers/cus_M8emIMB2jMljfy
    body:
      encoding: UTF-8
      string: invoice_settings[default_payment_method]=pm_1LQNSUKXBGcbgpbZDRmXQTgd
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/6.5.0 PayRails/4.0.3 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer <STRIPE_PRIVATE_KEY>
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_8e6fDn0B2DRWXJ","request_duration_ms":1047}}'
      Idempotency-Key:
      - abb45eee-da2e-461b-bb93-4172d067e205
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"4.0.3"},"bindings_version":"6.5.0","lang":"ruby","lang_version":"3.1.2
        p20 (2022-04-12)","platform":"x86_64-darwin21","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.localdomain 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22
        PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.localdomain"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 28 Jul 2022 03:32:24 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '692'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Idempotency-Key:
      - abb45eee-da2e-461b-bb93-4172d067e205
      Original-Request:
      - req_TYc0wDokMIqxgM
      Request-Id:
      - req_TYc0wDokMIqxgM
      Stripe-Should-Retry:
      - 'false'
      Stripe-Version:
      - '2020-08-27'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: UTF-8
      string: |-
        {
          "id": "cus_M8emIMB2jMljfy",
          "object": "customer",
          "address": null,
          "balance": 0,
          "created": 1658979142,
          "currency": null,
          "default_currency": null,
          "default_source": null,
          "delinquent": false,
          "description": null,
          "discount": null,
          "email": "stripe@example.org",
          "invoice_prefix": "80E29DFA",
          "invoice_settings": {
            "custom_fields": null,
            "default_payment_method": "pm_1LQNSUKXBGcbgpbZDRmXQTgd",
            "footer": null,
            "rendering_options": null
          },
          "livemode": false,
          "metadata": {},
          "name": "Stripe User",
          "next_invoice_sequence": 1,
          "phone": null,
          "preferred_locales": [],
          "shipping": null,
          "tax_exempt": "none",
          "test_clock": null
        }
  recorded_at: Thu, 28 Jul 2022 03:32:22 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/subscriptions
    body:
      encoding: UTF-8
      string: expand[0]=pending_setup_intent&expand[1]=latest_invoice.payment_intent&expand[2]=latest_invoice.charge.invoice&items[0][plan]=default&off_session=true&trial_from_plan=true&customer=cus_M8emIMB2jMljfy
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/6.5.0 PayRails/4.0.3 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer <STRIPE_PRIVATE_KEY>
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_TYc0wDokMIqxgM","request_duration_ms":484}}'
      Idempotency-Key:
      - bfdc03f5-e8e1-471c-aa89-dbedd487269e
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"4.0.3"},"bindings_version":"6.5.0","lang":"ruby","lang_version":"3.1.2
        p20 (2022-04-12)","platform":"x86_64-darwin21","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.localdomain 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22
        PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.localdomain"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 28 Jul 2022 03:32:27 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '23205'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Idempotency-Key:
      - bfdc03f5-e8e1-471c-aa89-dbedd487269e
      Original-Request:
      - req_EDo4fc5IoVsrTo
      Request-Id:
      - req_EDo4fc5IoVsrTo
      Stripe-Should-Retry:
      - 'false'
      Stripe-Version:
      - '2020-08-27'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 28 Jul 2022 03:32:22 GMT
- request:
    method: get
    uri: https://api.stripe.com/v1/charges/ch_3LQNSWKXBGcbgpbZ1DY9HZ1P?expand%5B%5D=invoice.total_discount_amounts.discount&expand%5B%5D=invoice.total_tax_amounts.tax_rate
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/6.5.0 PayRails/4.0.3 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer <STRIPE_PRIVATE_KEY>
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_EDo4fc5IoVsrTo","request_duration_ms":3050}}'
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"4.0.3"},"bindings_version":"6.5.0","lang":"ruby","lang_version":"3.1.2
        p20 (2022-04-12)","platform":"x86_64-darwin21","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.localdomain 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22
        PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.localdomain"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 28 Jul 2022 03:32:27 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '7854'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Request-Id:
      - req_x3moRy0Y7pXH3v
      Stripe-Version:
      - '2020-08-27'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 28 Jul 2022 03:32:22 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/subscriptions/sub_1LQNSWKXBGcbgpbZ6Nh4wmSM
    body:
      encoding: UTF-8
      string: cancel_at_period_end=true&expand[0]=pending_setup_intent&expand[1]=latest_invoice.payment_intent&expand[2]=latest_invoice.charge.invoice
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/6.5.0 PayRails/4.0.3 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer <STRIPE_PRIVATE_KEY>
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_x3moRy0Y7pXH3v","request_duration_ms":394}}'
      Idempotency-Key:
      - 18c2e80d-d5b5-49bb-a77a-6900e85aa513
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"4.0.3"},"bindings_version":"6.5.0","lang":"ruby","lang_version":"3.1.2
        p20 (2022-04-12)","platform":"x86_64-darwin21","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.localdomain 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22
        PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.localdomain"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 28 Jul 2022 03:32:28 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '23228'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Idempotency-Key:
      - 18c2e80d-d5b5-49bb-a77a-6900e85aa513
      Original-Request:
      - req_TCnrXiZ184ms1j
      Request-Id:
      - req_TCnrXiZ184ms1j
      Stripe-Should-Retry:
      - 'false'
      Stripe-Version:
      - '2020-08-27'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 28 Jul 2022 03:32:22 GMT
- request:
    method: post
    uri: https://api.stripe.com/v1/subscriptions/sub_1LQNSWKXBGcbgpbZ6Nh4wmSM
    body:
      encoding: UTF-8
      string: plan=default&trial_end=now&cancel_at_period_end=false&expand[0]=pending_setup_intent&expand[1]=latest_invoice.payment_intent&expand[2]=latest_invoice.charge.invoice
    headers:
      User-Agent:
      - Stripe/v1 RubyBindings/6.5.0 PayRails/4.0.3 (https://github.com/pay-rails/pay)
      Authorization:
      - Bearer <STRIPE_PRIVATE_KEY>
      Content-Type:
      - application/x-www-form-urlencoded
      X-Stripe-Client-Telemetry:
      - '{"last_request_metrics":{"request_id":"req_TCnrXiZ184ms1j","request_duration_ms":1279}}'
      Idempotency-Key:
      - 87d6f838-4b1b-4e37-bb04-65f9d8b03e0c
      Stripe-Version:
      - '2020-08-27'
      X-Stripe-Client-User-Agent:
      - '{"application":{"name":"PayRails","partner_id":"pp_partner_IqhY0UExnJYLxg","url":"https://github.com/pay-rails/pay","version":"4.0.3"},"bindings_version":"6.5.0","lang":"ruby","lang_version":"3.1.2
        p20 (2022-04-12)","platform":"x86_64-darwin21","engine":"ruby","publisher":"stripe","uname":"Darwin
        Chriss-iMac.localdomain 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22
        PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64","hostname":"Chriss-iMac.localdomain"}'
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 28 Jul 2022 03:32:29 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '23645'
      Connection:
      - keep-alive
      Access-Control-Allow-Credentials:
      - 'true'
      Access-Control-Allow-Methods:
      - GET, POST, HEAD, OPTIONS, DELETE
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Request-Id, Stripe-Manage-Version, X-Stripe-External-Auth-Required, X-Stripe-Privileged-Session-Required
      Access-Control-Max-Age:
      - '300'
      Cache-Control:
      - no-cache, no-store
      Idempotency-Key:
      - 87d6f838-4b1b-4e37-bb04-65f9d8b03e0c
      Original-Request:
      - req_hWPuaMCY7kF60J
      Request-Id:
      - req_hWPuaMCY7kF60J
      Stripe-Should-Retry:
      - 'false'
      Stripe-Version:
      - '2020-08-27'
      Strict-Transport-Security:
      - max-age=31556926; includeSubDomains; preload
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 28 Jul 2022 03:32:22 GMT
recorded_with: VCR 6.1.0
